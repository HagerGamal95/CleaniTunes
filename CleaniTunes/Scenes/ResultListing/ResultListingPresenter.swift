//
//  ResultListingPresenter.swift
//  CleaniTunes
//
//  Created by hager gamal on 1/29/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ResultListingPresentationLogic {
    func presentResult(results: [Result])
    func setDisplayMode(mode: DisplayMode)
}

class ResultListingPresenter: ResultListingPresentationLogic {
    weak var viewController: ResultListingDisplayLogic?
    
    // MARK: set DisplayMode
    
    func setDisplayMode(mode: DisplayMode) {
        viewController?.displayMode(displayMode: mode)
    }
    
    // MARK: present Result
    
    func presentResult(results: [Result]) {
        
        var resultArray: [ResultListing.GetResults.ViewModel.ResultModel] = []
        for result in results {
            if  let trackUrlString = result.artworkUrl100, let trackImageURL = URL(string: trackUrlString), let wrapperType = result.wrapperType {
                let name: String = (result.trackName) ?? (result.collectionName ?? "")
                resultArray.append(ResultListing.GetResults.ViewModel.ResultModel(trackName: name, trackImageURL: trackImageURL, artistName: result.artistName, wrapperType: wrapperType, previewUrl: URL(string: result.previewURL ?? ""), longDescription: result.longDescription))
            }
        }
        
        var groupedResult: [[ResultListing.GetResults.ViewModel.ResultModel]] = []

        let dictionaryResult = Dictionary(grouping: resultArray) { (result) in
            return result.wrapperType
        }
        for key in dictionaryResult.keys {
            if let element = dictionaryResult[key] {
                groupedResult.append(element)
            }
        }
        
        let viewModel = ResultListing.GetResults.ViewModel(results: groupedResult)
        viewController?.displayResults(viewModel: viewModel)
    }
}
