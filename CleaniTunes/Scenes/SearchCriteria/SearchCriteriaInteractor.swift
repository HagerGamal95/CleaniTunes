//
//  SearchCriteriaInteractor.swift
//  CleaniTunes
//
//  Created by hager gamal on 1/29/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchCriteriaBusinessLogic {
    func validate(input: String?, selectedMediaTypes: [(displayedName: String, name: String)])
    func fetchResult(request: SearchCriteria.GetResults.Request)
}

protocol SearchCriteriaDataStore {
    var results: [Result]? { get set }
}

class SearchCriteriaInteractor: SearchCriteriaBusinessLogic, SearchCriteriaDataStore {
    var presenter: SearchCriteriaPresentationLogic
    var worker: SearchCriteriaWorker
    var results: [Result]?
    
    init(presenter: SearchCriteriaPresentationLogic, worker: SearchCriteriaWorker = SearchCriteriaWorker()) {
        self.presenter = presenter
        self.worker = worker
    }
    
    // MARK: fetch Result
    
    func validate(input: String?, selectedMediaTypes: [(displayedName: String, name: String)]) {
        if input?.trimmingCharacters(in: .whitespaces).isEmpty == true {
            presenter.presentError(error: "Please enter term to search")
        } else {
            if  selectedMediaTypes.isEmpty == true {
                presenter.presentError(error: "Please enter media type to search")
            } else {
                presenter.fetchResult(term: input ?? "", entity: selectedMediaTypes.map { $0.name })
            }
        }
    }
    
    func fetchResult(request: SearchCriteria.GetResults.Request) {
        worker.fetchResults(request: request, completionHandler: { (results, error) in
            if let error = error {
                self.presenter.presentError(error: error.message)
            } else {
                if let results = results {
                    if results.isEmpty {
                        self.presenter.presentNoData()
                    } else {
                        self.results = results
                        let response = SearchCriteria.GetResults.Response(results: results)
                        self.presenter.presentResultsList(response: response)
                    }
                }
            }
        })
    }
}
