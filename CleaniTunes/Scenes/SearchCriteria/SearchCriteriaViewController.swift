//
//  SearchCriteriaViewController.swift
//  CleaniTunes
//
//  Created by hager gamal on 1/29/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import TTGTagCollectionView
protocol SearchCriteriaDisplayLogic: class {
    func navigateToListing(viewModel: SearchCriteria.GetResults.ViewModel)
    func showNoDataError()
    func presentError(error: String)
}

class SearchCriteriaViewController: UIViewController, SearchCriteriaDisplayLogic, MediaTypeSelectionDelegate {
    
    @IBOutlet weak var labelTermDescription: UILabel!
    @IBOutlet weak var textFieldTerm: UITextField!
    @IBOutlet weak var labelEntityDescription: UILabel!
    @IBOutlet weak var buttonSubmit: UIButton!
    @IBOutlet weak var innerViewTags: UIView!
    @IBOutlet weak var viewSelectedMediaTypes: UIView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    
    var interactor: SearchCriteriaBusinessLogic?
    var router: (NSObjectProtocol & SearchCriteriaRoutingLogic & SearchCriteriaDataPassing)?
    var selectedMediaTypes: [(displayedName: String, name: String)] = []
    var tagCollectionView: TTGTextTagCollectionView?
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let presenter = SearchCriteriaPresenter(viewController: self)
        let interactor = SearchCriteriaInteractor(presenter: presenter)
        let router = SearchCriteriaRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.setNavigationBarHidden(true, animated: animated)
    }
    override func viewWillDisappear(_ animated: Bool) {
        self.navigationController?.setNavigationBarHidden(false, animated: animated)
        
    }
    
    @IBAction func buttonSubmitDidTapped(_ sender: Any) {
        if textFieldTerm.text?.trimmingCharacters(in: .whitespaces).isEmpty == true {
            showValidationAlert(message: "Please enter term to search")
        } else {
            if  selectedMediaTypes.isEmpty == true {
                showValidationAlert(message: "Please enter media type to search")
            } else {
                fetchResult(term: textFieldTerm.text ?? "", entity: selectedMediaTypes.map { $0.name })
            }
        }
    }
    
    func showValidationAlert(message: String) {
        let alertController = UIAlertController(title: "Error", message: message, preferredStyle: .alert)
        let action1 = UIAlertAction(title: "Ok", style: .default)
        alertController.addAction(action1)
        self.present(alertController, animated: true, completion: nil)
    }
    
    func showNoDataError() {
        activityIndicator.stopAnimating()
        showValidationAlert(message: "there is no Data for your search")
    }
    
    func presentError(error: String) {
        activityIndicator.stopAnimating()
        showValidationAlert(message: error)
    }
    
    func startAnimating() {
        self.activityIndicator.isHidden = false
        self.activityIndicator.startAnimating()
    }
    
    func fetchResult(term: String, entity: [String]) {
        startAnimating()
        let request = SearchCriteria.GetResults.Request(term: term, entity: entity)
        interactor?.fetchResult(request: request)
    }
    
    @IBAction func mediaTypeViewDidTapped(_ sender: Any) {
        router?.navigateToMediaTypeSelection(selectedMediaTypes: selectedMediaTypes.map { $0.displayedName })
    }
    
    func selectedMediaTypes(mediaTypes: [(displayedName: String, name: String)]) {
        selectedMediaTypes = mediaTypes
        addTagsView(mediaTypes: mediaTypes.map { $0.displayedName })
    }
    
    func addTagsView(mediaTypes: [String]) {
        self.innerViewTags.subviews.forEach {
            $0.removeFromSuperview()
        }
        
        let tagCollectionView = TTGTextTagCollectionView(frame: innerViewTags.frame)
        self.innerViewTags.addSubview(tagCollectionView)
        tagCollectionView.isUserInteractionEnabled = false
        let tap = UITapGestureRecognizer(target: self, action: #selector(self.mediaTypeViewDidTapped(_:)))
        innerViewTags.addGestureRecognizer(tap)
        tagCollectionView.addTags(mediaTypes)
    }
    
    func navigateToListing(viewModel: SearchCriteria.GetResults.ViewModel) {
        activityIndicator.stopAnimating()
        router?.navigateToResultList(result: viewModel.results)
    }
}
