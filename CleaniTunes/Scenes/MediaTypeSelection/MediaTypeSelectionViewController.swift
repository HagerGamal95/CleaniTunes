//
//  MediaTypeSelectionViewController.swift
//  CleaniTunes
//
//  Created by hager gamal on 1/29/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MediaTypeSelectionDelegate: class {
    func selectedMediaTypes(mediaTypes: [(displayedName: String, name: String)])
}

protocol MediaTypeSelectionDisplayLogic: class {
    func displayMediaTypes(viewModel: MediaTypeSelection.GetMediaType.ViewModel)
}

class MediaTypeSelectionViewController: UIViewController, MediaTypeSelectionDisplayLogic {
    
    @IBOutlet weak var tableViewMediaType: UITableView!
    
    var interactor: MediaTypeSelectionBusinessLogic?
    var router: (NSObjectProtocol & MediaTypeSelectionDataPassing)?
    var displayedMediaTypes: [MediaType] = []
    weak var delegate: MediaTypeSelectionDelegate?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MediaTypeSelectionInteractor()
        let presenter = MediaTypeSelectionPresenter()
        let router = MediaTypeSelectionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        getMediaTypes()
    }
    
    func getMediaTypes() {
        interactor?.getMediaTypes()
    }
    
    // MARK: Actions
    
    @IBAction func doneButtonDidTapped(_ sender: Any) {
        delegate?.selectedMediaTypes(mediaTypes: getSelectedMediaTypes())
        navigationController?.popViewController(animated: true)
    }
    
    func getSelectedMediaTypes() -> [(String, String)] {
        var mediaTypeSelected: [(displayedName: String, name: String)] = []
        for mediaType in displayedMediaTypes where mediaType.isSelected {
            mediaTypeSelected.append((mediaType.displayedTitle, mediaType.title))
        }
        return mediaTypeSelected
    }
    
    func displayMediaTypes(viewModel: MediaTypeSelection.GetMediaType.ViewModel) {
        displayedMediaTypes = viewModel.mediaTypes
    }
}
extension MediaTypeSelectionViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        self.displayedMediaTypes.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: "MediaTypeTableViewCell") as? MediaTypeTableViewCell {
            cell.labelTitle.text = displayedMediaTypes[indexPath.row].displayedTitle
            cell.imageSelect.image = displayedMediaTypes[indexPath.row].isSelected == true ? UIImage(named: "checked") : UIImage(named: "unChecked")
            return cell
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableViewMediaType.deselectRow(at: indexPath, animated: true)
        guard let cell = tableView.cellForRow(at: indexPath) as? MediaTypeTableViewCell else {return}
        var mediaTypeClicked = displayedMediaTypes[indexPath.row]
        mediaTypeClicked.isSelected = !mediaTypeClicked.isSelected
        displayedMediaTypes.remove(at: indexPath.row)
        displayedMediaTypes.insert(mediaTypeClicked, at: indexPath.row)
        cell.imageSelect.image = displayedMediaTypes[indexPath.row].isSelected == true ? UIImage(named: "checked") : UIImage(named: "unChecked")
    }
}
